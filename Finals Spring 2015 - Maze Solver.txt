//Problem        : Finals Spring 2015 - Maze Solver
//Language       : C++
//Compiled Using : g++
//Version        : GCC 4.9.1
//Input for your program will be provided from STDIN
//Print out all output from your program to STDOUT

#include <iostream>
#include <string>
#include <algorithm>
#include <climits>
#include <vector>

using namespace std;
void dfs(int i, int j, string res, vector<string>& maze, vector<vector<int>>& visited,  int r, int c)
{
    if(i < 0 || j < 0 || i >= maze.size() || j >= maze[0].length()) 
        return;
    
    if(visited[i][j])
        return;
    
    if(maze[i][j] == 'X')
        return;
        
    if(i == r && j == c)
    {
        res += to_string(i) + "," + to_string(j) + "\n";
        cout << res;
        return;
    }
    
    visited[i][j] = 1;
    
    res += to_string(i) + "," + to_string(j) + "\n";
    
    dfs(i + 1, j , res, maze, visited, r, c);
    dfs(i - 1, j , res, maze, visited, r, c);
    dfs(i, j + 1 , res, maze, visited, r, c);
    dfs(i , j - 1, res, maze, visited, r, c);
}

int main() {
    int row, col;
    vector<string> maze;

    cin >> row >> col;
    
    int temp = row;
    string inp;
    
    while(temp--)
    {
        cin >> inp;
        maze.push_back(inp);
    }
    
    string res = "";
    vector<vector<int>> visited(row, vector<int>(col, 0));
    
    dfs(1, 0, res, maze, visited, row - 2, col - 1);
    return 0;
}
